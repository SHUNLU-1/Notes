{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    // 详细内容参考:https://code.visualstudio.com/docs(非常全面 很专业)
    "version": "0.2.0",
    "configurations": [             // 此配置文件用于调试
        {                           
            "name": "(gdb) Launch", // 配置名称(理论上什么名字都可以 但是别那么非主流)
            "type": "cppdbg",       // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg
            "request": "launch",    // 请求配置类型，可以为launch（启动）或attach（附加）
            // 将要进行调试的程序的路径(此路径必须对应你构建完的可执行文件的位置,即与task.json文件中-o输出的路径名称一致)
            // 现在已弃用的${workspaceRoot} 目前使用${workspaceFolder} 对应该文件夹根目录下 
            // fileBasenameNoExtension:当前打开的文件的基本名称，没有文件扩展名
            "program": "${workspaceFolder}/${fileBasenameNoExtension}.out",
            "args": [],                 // 程序调试时传递给程序的命令行参数，这里设为空即可
            "stopAtEntry": false,       // 设为true时程序将暂停在程序入口处，相当于在main上打断点
            "cwd": "${workspaceFolder}",// 启动时任务运行器的当前工作目录
            "environment": [],          // 环境变量，这里设为空即可
            "externalConsole": true,    // 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端
            "MIMode": "gdb",            // 指定连接的调试器，gdb是minGW中的调试程序
            "setupCommands": [          // 要执行以设置 GDB 或 LLDB 的命令的 JSON 数组
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "build"     // 调试开始前执行的任务，我们在调试前要编译构建。与tasks
        }
    ]
}