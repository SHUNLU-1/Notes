{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {   //这个大括号里是‘构建（build）’任务
            "label": "build", //任务名称，可以更改，不过不建议改
            "type": "shell",  //任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "command": "g++", //编译命令，这里是gcc，编译c++的话换成g++
            "args": [         //方括号里是传给gcc命令的一系列参数，用于实现一些功能
                "-o",         //指定输出文件的路径和名称
                "${fileDirname}/bin/${fileBasenameNoExtension}.o",
                
                "-g",         //生成和调试有关的信息
                "-Wall",      // 开启额外警告
                
                // "-static-libgcc",  // 静态链接libgcc
                "-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
                "-std=c++11",         // 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++11
                // 次处需设置工程目录下的cpp(要对应到每一个文件夹下的程序文件)
                "${workspaceFolder}/*.cpp",
                "${workspaceFolder}/Light/Light.cpp",
                "${workspaceFolder}/ObstacleBlock/ObstacleBlock.cpp",
                "${workspaceFolder}/OreBox/OreBox.cpp",
                "${workspaceFolder}/Others/Increase/Increase.cpp",
                "${workspaceFolder}/Others/Monitor/Monitor.cpp",
                // 此处设置opencv头文件
                "-I", "/usr/local/include",
                "-I", "/usr/local/include/opencv4",
                "-I", "/usr/local/include/opencv4/opencv2",
                "-I", "/usr/local/include/opencv4/opencv2",
                // 此处加入工程目录文件夹
                "-I", "${workspaceFolder}/Light",
                "-I", "${workspaceFolder}/ObstacleBlock",
                "-I", "${workspaceFolder}/OreBox",
                "-I", "${workspaceFolder}/Others/Increase",
                "-I", "${workspaceFolder}/Others/Monitor",
                // 外部库依赖
                "-l", "opencv_core",
                "-l", "opencv_imgproc",
                "-l", "opencv_imgcodecs",
                "-l", "opencv_video",
                "-l", "opencv_ml",
                "-l", "opencv_highgui",
                "-l", "opencv_objdetect",
                "-l", "opencv_flann",
                "-l", "opencv_imgcodecs",
                "-l", "opencv_photo",
                "-l", "opencv_videoio"
            ],
            "presentation": {      //执行这个任务时的一些其他设定
                "echo": true,      //表示在执行任务时在终端要有输出
                "reveal": "always",//执行任务时是否跳转到终端面板，可以为always，silent，never
                "focus": false,    //设为true后可以使执行task时焦点聚集在终端，但对编译来说，设为true没有意义，因为运行的时候才涉及到输入
                "panel": "new"     //每次执行这个task时都新建一个终端面板，也可以设置为shared，共用一个面板，不过那样会出现‘任务将被终端重用’的提示，比较烦人
            },
            "problemMatcher":{
                "owner": "cpp",
                "fileLocation":[
                    "relative",
                    "${workspaceFolder}"
                ],
                "pattern":[
                    {
                        "regexp": "^([^\\\\s].*)\\\\((\\\\d+,\\\\d+)\\\\):\\\\s*(.*)$",
                        "file": 1,
                        "location": 2,
                        "message": 3
                    }
                ]
            },
            "group": {             //group表示‘组’，我们可以有很多的task，然后把他们放在一个‘组’里
                "kind": "build",   //表示这一组任务类型是构建
                "isDefault": true  //表示这个任务是当前这组任务中的默认任务
            }
        },
        {   //这个大括号里是‘运行(run)’任务，一些设置与上面的构建任务性质相同
            "label": "run", 
            "type": "shell", 
            "dependsOn": "build", //任务依赖，因为要运行必须先构建，所以执行这个任务前必须先执行build任务，
            "command":"${fileDirname}/bin/${fileBasenameNoExtension}.o",//执行文件，只需要指定这个文件在哪里就好
            "group": {
                "kind": "test",   //这一组是‘测试’组，将run任务放在test组里方便我们用快捷键执行
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,    //这个就设置为true了，运行任务后将焦点聚集到终端，方便进行输入
                "panel": "new"
            }
        }
    ]
}